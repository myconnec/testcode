var CACHE_VERSION = '<%= ENV['WEB_APP_VERSION'] %>';
var CACHE_NAME = CACHE_VERSION + ':<%= ENV['NAME'] %>-cache';

function onInstall(event) {
  console.log('[Serviceworker]', "Installing!", event);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        // make sure serviceworker.js is not required by application.js
        // if you want to reference application.js from here
        '/offline.html',
        '<%= asset_path "application.css" %>',
        '<%= asset_path "bootstrap/glyphicons-halflings-regular.ttf" %>',
        '<%= asset_path "bootstrap/glyphicons-halflings-regular.woff2" %>',
        '<%= asset_path "connechub-with-tagline.svg" %>',
        '<%= asset_path "connechub.svg" %>',
        '<%= asset_path "font-awesome/fontawesome-webfont.ttf" %>',
        '<%= asset_path "font-awesome/fontawesome-webfont.woff2" %>',
        'manifest.json'
      ]);
    })
  );
}

function onActivate(event) {
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

function onFetch(event) {
  event.respondWith(async function() {
    // Try the cache
    const cachedResponse = await caches.match(event.request);
    if (cachedResponse) return cachedResponse;

    try {
      // Fall back to network
      return await fetch(event.request);
    } catch (err) {
      // If both fail, show a generic fallback:
      return caches.match('/offline.html');
      // However, in reality you'd have many different
      // fallbacks, depending on URL & headers.
      // Eg, a fallback silhouette image for avatars.
    }
  }());
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);

function cache(request, response) {
  if (response.type === "error" || response.type === "opaque") {
    return Promise.resolve(); // do not put in cache network errors
  }

  return caches
    .open(CACHE_NAME)
    .then(cache => cache.put(request, response.clone()));
}
