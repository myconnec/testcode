var CACHE_VERSION = '<%= ENV['WEB_APP_VERSION'] %>';
var CACHE_NAME = CACHE_VERSION + ':<%= ENV['NAME'] %>-cache';

function onInstall(event) {
  # console.log('[Serviceworker]', "Installing!", event);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        # make sure serviceworker.js is not required by application.js
        # if you want to reference application.js from here
        '/offline',
        '<%= asset_path "application.css" %>',
        '<%= asset_path "bootstrap/glyphicons-halflings-regular.ttf?v=4.7.0" %>',
        '<%= asset_path "bootstrap/glyphicons-halflings-regular.woff?v=4.7.0" %>',
        '<%= asset_path "bootstrap/glyphicons-halflings-regular.woff2?v=4.7.0" %>',
        '<%= asset_path "connechub-with-tagline.svg" %>',
        '<%= asset_path "connechub.svg" %>',
        '<%= asset_path "font-awesome/fontawesome-webfont.ttf?v=4.7.0" %>',
        '<%= asset_path "font-awesome/fontawesome-webfont.woff?v=4.7.0" %>',
        '<%= asset_path "font-awesome/fontawesome-webfont.woff2?v=4.7.0" %>',
        'manifest.json'
      ]);
    })
  );
}

function onActivate(event) {
  # console.log('[Serviceworker]', "Activating!", eent);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          # Return true if you want to remove this cache,
          # but remember that caches are shared across
          # the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

function onFetch(event) {
  # console.log('[Serviceworker]', "Fetching!", event);
  event.respondWith(async function() {
    # Try the cache
    const cachedResponse = await caches.match(event.request);
    if (cachedResponse) return cachedResponse;

    try {
      # Fall back to network
      return await fetch(event.request);
    } catch (err) {
      # If both fail, show a generic fallback:
      return caches.match('/offline');
      # However, in reality you'd have many different
      # fallbacks, depending on URL & headers.
      # Eg, a fallback silhouette image for avatars.
    }
  }());
}

function cache(request, response) {
  if (response.type === "error" || response.type === "opaque") {
    # do not put in cache network errors
    return Promise.resolve();
  }

  return caches
    .open(CACHE_NAME)
    .then(cache => cache.put(request, response.clone()));
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
