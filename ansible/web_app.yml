---
- hosts: all
  vars:
    APP_ENV: APP_ENV
    APP_NAME: APP_NAME
    AWS_REGION: AWS_REGION
    SSH_KEY_ID: SSH_KEY_ID

    database_address: database_address
    media_profile_bucket_id: media_profile_bucket_id
    version: master

    local_group: ubuntu
    local_user: ubuntu

  become: true
  gather_facts: false

  pre_tasks:
    - name: Update dependencies via apt-get
      raw: export DEBIAN_FRONTEND=noninteractive && dpkg --configure -a && apt-get clean -y && apt-get autoclean -y && apt autoremove -yq && apt-get update -yq && apt-get upgrade -yq

    - name: Install CLI tools
      raw: apt-get install -y awscli apt-transport-https build-essential python-minimal python-setuptools python-pip software-properties-common

  tasks:
    # source: https://linuxize.com/post/how-to-add-swap-space-on-ubuntu-18-04/
    - name: Add swap disk to instance
      shell: |
        swapon --show
        dd if=/dev/zero of=/swapfile bs=1024 count=1048576
        chmod 600 /swapfile
        mkswap /swapfile
        swapon /swapfile
        swapon --show
        free -h

    - name: Install system dependencies
      apt:
        update_cache: true
        pkg:
          - autoconf
          - automake
          - bison
          - curl
          - git
          - htop
          - imagemagick
          - libc6-dev
          - libcurl4-openssl-dev
          - libffi-dev
          - libmysqlclient-dev
          - libreadline6-dev
          - libsqlite3-dev
          - libssl-dev
          - libtool
          - libxml2-dev
          - libxslt-dev
          - libyaml-dev
          - mysql-client
          - ncurses-dev
          - node-gyp
          - nodejs
          - nodejs-dev
          - npm
          - s3fs
          - subversion
          - zlib1g # http://askubuntu.com/questions/59205/no-such-file-to-load-zlib-error-when-installing-a-gem
          - zlib1g-dev  # error while installing bundler: http://stackoverflow.com/questions/9727908/cannot-load-such-file-zlib-even-after-using-rvm-pkg-install-zlib
        state: present

    # TODO move into a Ansible role
    # Ruby source, build, install, clean up

    - name: Create a working directory
      file:
        path:  /tmp/build_ruby
        state: directory
        mode: "u+rwx"

    - name: Download Ruby 2.3.8
      get_url:
        url:  https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.8.tar.gz
        dest: /tmp/build_ruby/ruby-2.3.8.tar.gz

    - name: Unpack Ruby 2.3.8
      unarchive:
        src: /tmp/build_ruby/ruby-2.3.8.tar.gz
        dest: /tmp/build_ruby/
        remote_src: yes

    - name: Build ruby
      command: >
        {{ item }}
        chdir=/tmp/build_ruby/ruby-2.3.8
        creates=/usr/local/bin/ruby
      with_items:
        - ./configure --enable-shared
        - make
        - make install

    - name: Add ruby symlinks
      file:
        src: "/usr/local/bin/{{ item }}"
        dest: "/usr/bin/{{ item }}"
        state: link
        force: yes
      with_items:
        - erb
        - gem
        - irb
        - rake
        - rdoc
        - ruby

    - name: Remove the working directory
      file:
        path:  /tmp/build_ruby
        state: absent

    # GiT & SSH Configuration
    # TODO this can be a role

    - name: Get SSH private key for cloning web app repo
      shell: |
        mkdir ~/.ssh
        aws s3 cp s3://connechub-configs/{{ APP_ENV }}/iam_private_key ~/.ssh/iam_private_key
        chmod 0600 ~/.ssh/iam_private_key

    - name: Create SSH config
      copy:
        dest: ~/.ssh/config
        content: |
          Host git-codecommit.*.amazonaws.com
          User {{ SSH_KEY_ID }}
          IdentityFile ~/.ssh/iam_private_key

    - name: Git clone web app repo
      git:
        accept_hostkey: true
        clone: true
        dest: "/home/{{ local_user }}/{{ APP_NAME }}"
        force: true
        remote: origin
        repo: "ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/{{ APP_NAME }}"
        version: "{{ version }}"

    # Copy in configs
    # TODO this can be a role

    - name: GET app .env from storage
      command: >
        aws s3 cp s3://{{ APP_NAME }}-configs/{{ APP_ENV }}/.env /home/{{ local_user }}/{{ APP_NAME }}/.env

    - name: Copy API keys for S3 mounting into EC2 instance
      shell: |
        aws s3 cp s3://connechub-configs/{{ APP_ENV }}/.passwd-s3fs /home/{{ local_user }}/.passwd-s3fs
        chmod 0600 /home/{{ local_user }}/.passwd-s3fs
        chown {{ local_user }}:{{ local_user }} /home/{{ local_user }}/.passwd-s3fs

    # Update RDS connection string
    # TODO: Consider using the replace, lineinfile or template module rather than running sed.

    - name: Update RDS DNS address
      command: >
        sed -i "s/DB_HOST="mariadb"/DB_HOST="{{ database_address }}"/g" /home/{{ local_user }}/{{ APP_NAME }}/.env

    # Configure fusermount to enable "allow_other" s3fs mounting
    # TODO: Consider using the replace, lineinfile or template module rather than running sed.

    - name: Configure fusermount
      command: >
        sed -i "s/#user_allow_other/user_allow_other/g" /etc/fuse.conf

    # Application deps install
    # TODO would like to use the bundler module

    - name: Install Ruby Bundler and gems
      shell: |
        cd /home/{{ local_user }}/{{ APP_NAME }}
        gem install bundler -v 1.3.5
        # source https://bundler.io/man/bundle-binstubs.1.html
        bundle --binstubs
        bundle install
        # source https://philna.sh/blog/2017/06/12/speed-up-bundle-install-with-this-one-trick/
        # after v 1.4.0: --jobs=5

    - name: Change ownership of web app dir
      file:
        path: "/home/{{ local_user }}"
        group: "{{ local_group }}"
        owner: "{{ local_user }}"
        recurse: true

    # S3 mount for user profile images
    # TODO this can be a role

    - name: Check if media_profile_bucket_id path exists
      stat:
        path: /home/{{ local_user }}/{{ APP_NAME }}/public/system
      register: media_profile_bucket_stats

    - name: Create media_profile_bucket_id directory if it does not exist
      file:
        state: directory
        path: /home/{{ local_user }}/{{ APP_NAME }}/public/system
        owner: "{{ local_user }}"
        group: "{{ local_user }}"
        mode: 0755
      when: media_profile_bucket_stats.stat.exists == false

    - name: Mount media_profile_bucket_id to local file system
      command: |
        s3fs \
          -d \
          {{ media_profile_bucket_id }} \
          /home/{{ local_user }}/{{ APP_NAME }}/public/system \
          -o endpoint={{ AWS_REGION }} \
          -o use_cache=/home/ubuntu \
          -o multireq_max=5 \
          -o passwd_file=/home/{{ local_user }}/.passwd-s3fs  \
          -o url=https://s3.{{ AWS_REGION }}.amazonaws.com \
          -o nonempty \
          -o allow_other
      when: media_profile_bucket_stats.stat.exists == false

    # Start web server. This is the same as the instance's startup user-data

    - name: Run DB migrations and start the Puma web server
      become: "{{ local_user }}"
      shell: |
        cd ~/{{ APP_NAME }}
        rake db:migrate
        pkill -e -f puma
        bundle exec puma --bind tcp://0.0.0.0:9293 --daemon
