---
- hosts: all
  vars:
    APP_ENV: APP_ENV
    APP_NAME: APP_NAME
    AWS_REGION: AWS_REGION
    database_address: database_address
    local_user: ubuntu
    media_display_bucket_id: media_display_bucket_id
    media_source_bucket_id: media_source_bucket_id

  become: true
  gather_facts: false

  pre_tasks:
    - name: Update dependencies via apt-get
      raw: sudo apt-get clean && apt-get autoclean && sudo apt autoremove -y && sudo apt-get update -y

    - name: Installing awscli, https transport, build-essential, Python & PIP
      raw: sudo apt-get install -y awscli apt-transport-https build-essential python-minimal python-setuptools python-pip software-properties-common

  tasks:
    - name: Install system dependencies
      apt:
        pkg:
          - git
          - curl
          - libcurl4-openssl-dev
          - libffi-dev
          - libreadline6-dev
          - zlib1g
          - zlib1g-dev
        state: present

    - name: Install NodeJs and NPM
      apt:
        pkg:
          - nodejs
          - nodejs-dev
          - node-gyp
          - npm
        state: present

    # Source: https://github.com/wakproductions/ansible-examples/blob/master/roles/install-ruby241/tasks/main.yml

    - name: Install dependencies specificly for Ruby 2.3.8
      apt:
        pkg:
          - libyaml-dev
          - libxml2-dev
          - libxslt-dev
          - libsqlite3-dev
          - autoconf
          - libc6-dev
          - ncurses-dev
          - automake
          - libtool
          - bison
          - subversion
          - zlib1g # http://askubuntu.com/questions/59205/no-such-file-to-load-zlib-error-when-installing-a-gem
          - zlib1g-dev  # error while installing bundler: http://stackoverflow.com/questions/9727908/cannot-load-such-file-zlib-even-after-using-rvm-pkg-install-zlib
          - libssl-dev
        state: present

    # Ruby source, build, install, clean up

    - name: Create a working directory
      file:
        path:  /tmp/build_ruby
        state: directory
        mode: 'u+rwx'

    - name: Download Ruby 2.3.8
      get_url:
        url:  https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.8.tar.gz
        dest: /tmp/build_ruby/ruby-2.3.8.tar.gz

    - name: Unpack Ruby 2.3.8
      unarchive:
        src: /tmp/build_ruby/ruby-2.3.8.tar.gz
        dest: /tmp/build_ruby/
        remote_src: yes

    - name: Build ruby
      command: >
        {{ item }}
        chdir=/tmp/build_ruby/ruby-2.3.8
        creates=/usr/local/bin/ruby
      with_items:
        - ./configure --enable-shared
        - make
        - make install

    - name: Add ruby symlinks
      file:
        src: "/usr/local/bin/{{ item }}"
        dest: "/usr/bin/{{ item }}"
        state: link
        force: yes
      with_items:
        - erb
        - gem
        - irb
        - rake
        - rdoc
        - ruby

    - name: Remove the working directory
      file:
        path:  /tmp/build_ruby
        state: absent

    # MySQL client

    - name: Install mysql-client and dependencies
      apt:
        pkg:
          - mysql-client
          - libmysqlclient-dev
        state: present

    - git_config:
        name: credential.helper
        value: '!aws codecommit credential-helper $@'

    - git_config:
        name: credential.UseHttpPath
        value: true

    - git:
        accept_hostkey: yes
        remote: origin
        depth: 1
        dest: /home/ubuntu/ConnecHub
        repo: https://git-codecommit.us-east-1.amazonaws.com/v1/repos/ConnecHub
        version: develop
        force: true

    # TODO would like to use the bundler module

    - name: Install bunbler and gems
      shell: |
        cd /home/ubuntu/ConnecHub && gem install bundler -v 1.3.5 && ./bin/bundle install
        # source https://philna.sh/blog/2017/06/12/speed-up-bundle-install-with-this-one-trick/
        # after v 1.4.0: --jobs=5

    - name: Simple GET operation
      command: >
        aws s3 cp s3://connechub-configs/{{ APP_ENV }}/.env /home/ubuntu/ConnecHub/.env

    # TODO: Consider using the replace, lineinfile or template module rather than running sed.

    - name: Update RDS DNS address
      command: >
        sed -i 's/DB_HOST="mariadb"/DB_HOST="{{ database_address }}"/g' /home/ubuntu/ConnecHub/.env

    - name: Change ownership of web app dir
      file:
        path: /home/ubuntu/ConnecHub
        group: ubuntu
        owner: ubuntu
        recurse: true

    - name: Setup database
      become: ubuntu
      shell: |
        cd /home/ubuntu/ConnecHub && ./bin/rake db:setup

    - name: Migrate database
      become: ubuntu
      shell: |
        cd /home/ubuntu/ConnecHub && ./bin/rake db:migrate

    - name: Start Rails server
      shell: |
        pkill ruby
        cd /home/ubuntu/ConnecHub
        rails server -d --binding 0.0.0.0 --port 3000

    # Redirect requests from port 80 to 3000 (Ruby on Rails default server port)

    - name: iptables rules
      shell: |
        iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000
        iptables-save > ~/iptables.conf
        iptables-restore < ~/iptables.conf

    - name: Install system dependencies
      apt:
        pkg:
          - s3fs
        state: present

    - name: Copy API keys for S3 mounting into EC2 instance
      copy:
        src: "../../.passwd-s3fs"
        dest: "/home/{{ local_user }}/.passwd-s3fs"
        owner: "{{ local_user }}"
        group: "{{ local_user }}"
        mode: 0600

    # Media Source bucket

    - name: Check if media_source_bucket path exists
      stat:
        path: /home/{{ local_user }}/{{ media_source_bucket_id }}
      register: media_source_bucket_stats

    - name: Create media_source_bucket_id directory if it does not exist
      file:
        state: directory
        path: /home/{{ local_user }}/{{ media_source_bucket_id }}
        owner: "{{ local_user }}"
        group: "{{ local_user }}"
        mode: 0755
      when: media_source_bucket_stats.stat.exists == false

    - name: Mount media_source_bucket_id to local file system
      command: >
        s3fs \
          -d \
          {{ media_source_bucket_id }} \
          /home/{{ local_user }}/{{ media_source_bucket_id }} \
          -o endpoint={{ AWS_REGION }} \
          -o use_cache=/tmp \
          -o multireq_max=5 \
          -o passwd_file=/home/{{ local_user }}/.passwd-s3fs  \
          -o url=https://s3.{{ AWS_REGION }}.amazonaws.com \
          -o nonempty \
          -o allow_other
      when: media_source_bucket_stats.stat.exists == false

    # Media Display bucket

    - name: Check if media_display_bucket_id path exists
      stat:
        path: /home/{{ local_user }}/{{ APP_NAME }}/public/system
      register: media_display_bucket_stats

    - name: Create media_display_bucket_id directory if it does not exist
      file:
        state: directory
        path: /home/{{ local_user }}/{{ APP_NAME }}/public/system
        owner: "{{ local_user }}"
        group: "{{ local_user }}"
        mode: 0755
      when: media_display_bucket_stats.stat.exists == false

    - name: Mount media_display_bucket_id to local file system
      shell: |
        s3fs \
          -d \
          {{ media_display_bucket_id }} \
          /home/{{ local_user }}/{{ APP_NAME}}/public/system \
          -o endpoint={{ AWS_REGION }} \
          -o use_cache=/tmp \
          -o multireq_max=5 \
          -o passwd_file=/home/{{ local_user }}/.passwd-s3fs  \
          -o url=https://s3.{{ AWS_REGION }}.amazonaws.com \
          -o nonempty \
          -o allow_other \
          -o umask=0022,uid=$(id -u $(whoami))
