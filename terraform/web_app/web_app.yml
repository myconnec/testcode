---
- hosts: all
  vars:
    APP_ENV: APP_ENV
    APP_NAME: APP_NAME
    AWS_REGION: AWS_REGION
    database_address: database_address
    local_group: ubuntu
    local_user: ubuntu
    media_display_bucket_id: media_display_bucket_id
    media_source_bucket_id: media_source_bucket_id

  become: true
  gather_facts: false

  pre_tasks:
    - name: Update dependencies via apt-get
      raw: export DEBIAN_FRONTEND=noninteractive && dpkg --configure -a && apt-get clean -y && apt-get autoclean -y && apt autoremove -yq && apt-get update -yq && apt-get upgrade -yq

    - name: Install CLI tools
      raw: apt-get install -y awscli apt-transport-https build-essential python-minimal python-setuptools python-pip software-properties-common

  tasks:
    # source: https://linuxize.com/post/how-to-add-swap-space-on-ubuntu-18-04/
    - name: Add swap disk to instance
      shell: |
        swapon --show
        dd if=/dev/zero of=/swapfile bs=1024 count=1048576
        chmod 600 /swapfile
        mkswap /swapfile
        swapon /swapfile
        swapon --show
        free -h

    - name: Install system dependencies
      apt:
        pkg:
          - curl
          - git
          - htop
          - imagemagick
          - libcurl4-openssl-dev
          - libffi-dev
          - libreadline6-dev
          - zlib1g
          - zlib1g-dev
        state: present

    - name: Install NodeJs and NPM
      apt:
        pkg:
          - nodejs
          - nodejs-dev
          - node-gyp
          - npm
        state: present

    # Source: https://github.com/wakproductions/ansible-examples/blob/master/roles/install-ruby241/tasks/main.yml

    - name: Install dependencies specificly for Ruby 2.3.8
      apt:
        pkg:
          - libyaml-dev
          - libxml2-dev
          - libxslt-dev
          - libsqlite3-dev
          - autoconf
          - libc6-dev
          - ncurses-dev
          - automake
          - libtool
          - bison
          - subversion
          - zlib1g # http://askubuntu.com/questions/59205/no-such-file-to-load-zlib-error-when-installing-a-gem
          - zlib1g-dev  # error while installing bundler: http://stackoverflow.com/questions/9727908/cannot-load-such-file-zlib-even-after-using-rvm-pkg-install-zlib
          - libssl-dev
        state: present

    # Ruby source, build, install, clean up

    - name: Create a working directory
      file:
        path:  /tmp/build_ruby
        state: directory
        mode: 'u+rwx'

    - name: Download Ruby 2.3.8
      get_url:
        url:  https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.8.tar.gz
        dest: /tmp/build_ruby/ruby-2.3.8.tar.gz

    - name: Unpack Ruby 2.3.8
      unarchive:
        src: /tmp/build_ruby/ruby-2.3.8.tar.gz
        dest: /tmp/build_ruby/
        remote_src: yes

    - name: Build ruby
      command: >
        {{ item }}
        chdir=/tmp/build_ruby/ruby-2.3.8
        creates=/usr/local/bin/ruby
      with_items:
        - ./configure --enable-shared
        - make
        - make install

    - name: Add ruby symlinks
      file:
        src: "/usr/local/bin/{{ item }}"
        dest: "/usr/bin/{{ item }}"
        state: link
        force: yes
      with_items:
        - erb
        - gem
        - irb
        - rake
        - rdoc
        - ruby

    - name: Remove the working directory
      file:
        path:  /tmp/build_ruby
        state: absent

    # MySQL client

    - name: Install mysql-client and dependencies
      apt:
        pkg:
          - mysql-client
          - libmysqlclient-dev
        state: present

  # GiT config

    - git_config:
        name: credential.helper
        value: '!aws codecommit credential-helper $@'

    - git_config:
        name: credential.UseHttpPath
        value: true

    - git:
        accept_hostkey: yes
        remote: origin
        depth: 1
        dest: /home/{{ local_user }}/{{ APP_NAME }}
        repo: https://git-codecommit.us-east-1.amazonaws.com/v1/repos/connechub
        version: master
        force: true

    # TODO would like to use the bundler module

    - name: Install bunbler and gems
      shell: |
        cd /home/{{ local_user }}/{{ APP_NAME }}
        gem install bundler -v 1.3.5
        # source https://bundler.io/man/bundle-binstubs.1.html
        bundle --binstubs
        bundle install
        # source https://philna.sh/blog/2017/06/12/speed-up-bundle-install-with-this-one-trick/
        # after v 1.4.0: --jobs=5

    - name: Check if app .env file exists
      stat:
        path: /home/{{ local_user }}/{{ APP_NAME }}/.env
      register: env_file

    - name: Remove app .env file
      command: >
        rm /home/{{ local_user }}/{{ APP_NAME }}/.env
      when: env_file.stat.exists == true

    - name: GET app .env from storage
      command: >
        aws s3 cp s3://{{ APP_NAME }}-configs/{{ APP_ENV }}/.env /home/{{ local_user }}/{{ APP_NAME }}/.env

    # TODO: Consider using the replace, lineinfile or template module rather than running sed.

    - name: Update RDS DNS address
      command: >
        sed -i 's/DB_HOST="mariadb"/DB_HOST="{{ database_address }}"/g' /home/{{ local_user }}/{{ APP_NAME }}/.env

    - name: Change ownership of web app dir
      file:
        path: /home/{{ local_user }}/{{ APP_NAME }}
        group: '{{ local_group }}'
        owner: '{{ local_user }}'
        recurse: true

    # db is already setup, do not overwrite
    # - name: Setup database
    #   become: '{{ local_user }}'
    #   shell: |
    #     cd /home/{{ local_user }}/{{ APP_NAME }} && ./bin/rake db:setup

    - name: Migrate database
      become: '{{ local_user }}'
      shell: |
        cd /home/{{ local_user }}/{{ APP_NAME }} && ./bin/rake db:migrate

    - name: Start Rails server
      shell: |
        pkill ruby
        cd /home/{{ local_user }}/{{ APP_NAME }}
        bundle exec puma --bind tcp://0.0.0.0:9293 --daemon

    # TODO make this a S3FS role
    # No longer needed. S3 is used via pre-signed URLs

    # - name: Install system dependencies
    #   apt:
    #     pkg:
    #       - s3fs
    #     state: present

    # - name: Copy API keys for S3 mounting into EC2 instance
    #   shell: |
    #     aws s3 cp s3://connechub-configs/{{ APP_ENV }}/.passwd-s3fs /home/{{ local_user }}/.passwd-s3fs
    #     chmod 0600 /home/{{ local_user }}/.passwd-s3fs
    #     chown {{ local_user}}:{{ local_user}} /home/{{ local_user }}/.passwd-s3fs

    # # Configure fusermount to enable 'allow_other' s3fs mounting
    # # TODO: Consider using the replace, lineinfile or template module rather than running sed.
    # - name: Configure fusermount
    #   command: >
    #     sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf

    # # Media Source bucket

    # - name: Check if media_source_bucket path exists
    #   stat:
    #     path: /home/{{ local_user }}/media-source-{{ APP_ENV }}
    #   register: media_source_bucket_stats

    # - name: Create media_source_bucket_id directory if it does not exist
    #   file:
    #     state: directory
    #     path: /home/{{ local_user }}/media-source-{{ APP_ENV }}
    #     owner: "{{ local_user }}"
    #     group: "{{ local_user }}"
    #     mode: 0755
    #   when: media_source_bucket_stats.stat.exists == false

    # - name: Mount media_source_bucket_id to local file system
    #   become: '{{ local_user }}'
    #   command: >
    #     s3fs \
    #       -d \
    #       {{ media_source_bucket_id }} \
    #       /home/{{ local_user }}/media-source-{{ APP_ENV }} \
    #       -o endpoint={{ AWS_REGION }} \
    #       -o use_cache=/home/ubuntu \
    #       -o multireq_max=5 \
    #       -o passwd_file=/home/{{ local_user }}/.passwd-s3fs  \
    #       -o url=https://s3.{{ AWS_REGION }}.amazonaws.com \
    #       -o nonempty \
    #       -o allow_other
    #   when: media_source_bucket_stats.stat.exists == false

    # # Media Display bucket

    # - name: Check if media_display_bucket_id path exists
    #   stat:
    #     path: /home/{{ local_user }}/{{ APP_NAME }}/public/system
    #   register: media_display_bucket_stats

    # - name: Create media_display_bucket_id directory if it does not exist
    #   file:
    #     state: directory
    #     path: /home/{{ local_user }}/{{ APP_NAME }}/public/system
    #     owner: "{{ local_user }}"
    #     group: "{{ local_user }}"
    #     mode: 0755
    #   when: media_display_bucket_stats.stat.exists == false

    # - name: Mount media_display_bucket_id to local file system
    #   become: '{{ local_user }}'
    #   command: |
    #     s3fs \
    #       -d \
    #       {{ media_display_bucket_id }} \
    #       /home/{{ local_user }}/{{ APP_NAME }}/public/system \
    #       -o endpoint={{ AWS_REGION }} \
    #       -o use_cache=/home/ubuntu \
    #       -o multireq_max=5 \
    #       -o passwd_file=/home/{{ local_user }}/.passwd-s3fs  \
    #       -o url=https://s3.{{ AWS_REGION }}.amazonaws.com \
    #       -o nonempty \
    #       -o allow_other
    #   when: media_display_bucket_stats.stat.exists == false
